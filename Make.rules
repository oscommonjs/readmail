env DANGER_GITHUB_API_TOKEN
env CIRCLE_ARTIFACTS

LINTER_EXPORT_NAME = lint
ANALYZER_EXPORT_NAME = static_analysis
BUILD_EXPORT_NAME = build
INSTALLED_FILES_RECORD_NAME = installed_files
	
global:
	SYSTEM_NAME = shellget('uname', '-s')

	def file_named(name):
		return name+'_output.txt'
	
	def write_file(file_path, file_contents):
		fd = open(file_path, 'w+')
		fd.write(file_contents)
		fd.close()

	def remove(file_path):
		shell('rm', ['-rRf', file_path])

	def removeall(name, location='.', flags=[]):
		shell('find', [location, '-name', name, '-delete']+flags)

	def checkfor(command_name):
		try:
			shellcheck(command_name, '--version')
			print('found '+command_name+'!')
		except:
			print('did not find '+command_name+'; please ensure your path is configured correctly and run `./make.py install-deps` first!')

install-tools:
	print('installing git hooks...')
	shell('./tools/hooks-config.py')

install-deps: install-tools
	print('installing dependencies...')
	shell('pip3', ['install', '--requirement', 'dependencies.txt'])
	if SYSTEM_NAME == 'Darwin':
		shell('gem', ['install', 'bundler', '--user'])
	else:
		shell('gem', ['install', 'bundler'])
	shell('bundle', 'install')

check:
	print('validating environment...')
	checkfor('python3')
	checkfor('pip3')
	checkfor('pylint')
	checkfor('mypy')
	checkfor('gem')
	checkfor('bundle')
	checkfor('danger')

clean:
	print('removing existing installation... ')
	touch(file_named(INSTALLED_FILES_RECORD_NAME))
	for file_path in tolist(shellget('cat', file_named(INSTALLED_FILES_RECORD_NAME))):
		remove(file_path)
	remove('./readmail.egg-info')
	remove('./build')
	remove('./dist')
	remove('./.eggs')
	removeall('.DS_Store')
	removeall('*_output.txt')
	removeall('*.pyc')
	removeall('__pycache__', flags=['-type', 'd'])

lint: check clean
	print('running linter... ')
	touch(file_named(LINTER_EXPORT_NAME))
	_, output, _ = shellexact('pylint', ['--rcfile=pylintrc', './readmail'])
	write_file(file_named(LINTER_EXPORT_NAME), output)
	print('generated linter report: '+file_named(LINTER_EXPORT_NAME))

analyze: lint
	print('running static analyzer... ')
	touch(file_named(ANALYZER_EXPORT_NAME))
	_, output, _  = shellexact('mypy', ['-p', './readmail'])
	write_file(file_named(ANALYZER_EXPORT_NAME), output)
	print('generated static analysis report: '+file_named(ANALYZER_EXPORT_NAME))

build: analyze
	print('building...')
	touch(file_named(INSTALLED_FILES_RECORD_NAME))
	_, output, _ = shellexact('python3', ['setup.py', 'install', '--record', file_named(INSTALLED_FILES_RECORD_NAME)])
	write_file(file_named(BUILD_EXPORT_NAME), output)

danger: build
	try:
		if DANGER_GITHUB_API_TOKEN is not None:
			print('running danger (PR)... ')
			shell('bundle', ['exec', 'danger', '--verbose'])
		else:
			print('running danger (local)... ')
			shell('bundle', ['exec', 'danger', 'local', '--verbose'])
	except:
		print('Did not run danger!')

artifacts: danger
	print('processing artifacts...')
	if CIRCLE_ARTIFACTS is not None:
		shell('cp', [file_named(LINTER_EXPORT_NAME), CIRCLE_ARTIFACTS])
		shell('cp', [file_named(ANALYZER_EXPORT_PATH), CIRCLE_ARTIFACTS])
	else:
		print('nothing to do!')

ci: artifacts

help:
	print('Usage:\n')
	print('./make.py build         -- Builds and installs')
	print('./make.py clean         -- Removes an existing build')
	print('./make.py lint          -- Runs pylint on the code')
	print('./make.py analyze       -- Runs mypy analysis on the code')
	print('./make.py install-tools -- Installs tools uses for development')
	print('./make.py install-deps  -- Installs the dependencies needed to build')
	print('./make.py danger        -- Runs Danger on the code')
	print('./make.py artifacts     -- tests for and exports artifacts from the build')
	print('./make.py ci            -- simulates running the build on CI')

all: help
